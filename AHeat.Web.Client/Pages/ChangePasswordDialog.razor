<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Security" Class="mr-3 mb-n1" />
            @MudDialog!.Title
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@ChangePassword" @ref="@form" Validation="@ChangePasswordDtoValidator.ValidateValue" ValidationDelay="0">
            <MudTextField InputType="InputType.Password" @bind-Value="@ChangePassword.OldPassword" Label="Old password"  For="@(() => ChangePassword.OldPassword)"/>
            <MudTextField InputType="InputType.Password" @bind-Value="@ChangePassword.NewPassword" Label="New password" For="@(() => ChangePassword.NewPassword)" />
            <MudTextField InputType="InputType.Password" @bind-Value="@ChangePassword.ConfirmPassword" Label="Confirm password" For="@(() => ChangePassword.ConfirmPassword)" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Success" OnClick="SavePassword">Save</MudButton>
    </DialogActions>

</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    [Parameter] public ChangePasswordDto ChangePassword { get; set; } = new ChangePasswordDto();

    public ChangePasswordDtoFluentValidator ChangePasswordDtoValidator = new ChangePasswordDtoFluentValidator();


    public MudForm? form;

    private void Cancel()
    {
        MudDialog!.Cancel();
    }

    private async Task SavePassword()
    {
        await form!.Validate();
        if (form!.IsValid)
        {
            MudDialog!.Close(DialogResult.Ok(ChangePassword));
        }
    }
}
